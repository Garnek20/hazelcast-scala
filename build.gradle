buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'com.jfrog.bintray' version "1.8.0"
    id 'scala'
    id 'maven-publish'
}

ext {
    latestScalaFull = [
        '2.11': '2.11.12',
        '2.12': '2.12.4'
    ]

    vJUnit = '4.12'
    vScala = System.properties.scalaVersion ?: '2.12'
    vScalaFull = latestScalaFull[vScala]
    vHazelcast = '3.9'
    vKryo = '4.0.1'
    vObjenesis = '2.6'
    vLz4 = '1.4.0'
}

sourceCompatibility = 1.7
if (vScala == '2.11') {
    targetCompatibility = 1.7
} else {
    targetCompatibility = 1.8
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}
if (version == '') {
    version = 'SNAPSHOT'
}
if (version == 'SNAPSHOT') {
    version = tsVersion(version)
}

def tsVersion(version) {
    java.text.SimpleDateFormat tsFmt = new java.text.SimpleDateFormat('yyMMddHHmm')
    tsFmt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
    return "${version}-b${tsFmt.format(new Date())}"
}

repositories {
    jcenter()
}

dependencies {

    compile "javax.cache:cache-api:1.0.0"
    compile "javax.transaction:transaction-api:1.1"

    compileOnly "org.scala-lang:scala-reflect:$vScalaFull"

    compileOnly "com.hazelcast:hazelcast:$vHazelcast"
    compileOnly "com.hazelcast:hazelcast-client:$vHazelcast"

    compileOnly "com.esotericsoftware:kryo:$vKryo"
    compileOnly "org.objenesis:objenesis:$vObjenesis"

    compileOnly "org.lz4:lz4-java:$vLz4"

    testCompile "junit:junit:$vJUnit"
    testCompile "org.scala-lang:scala-compiler:$vScalaFull"
    testCompile "com.hazelcast:hazelcast:$vHazelcast"
    testCompile "com.hazelcast:hazelcast-client:$vHazelcast"
    testCompile "com.esotericsoftware:kryo:$vKryo"
    testCompile "org.objenesis:objenesis:$vObjenesis"
    testCompile "org.lz4:lz4-java:$vLz4"

}

jar {
    baseName = "${project.name}_$vScala"
    manifest {
        attributes "Implementation-Title": project.name, "Implementation-Version": version
    }
}

task sourceJar(type: Jar) {
    baseName "${project.name}_$vScala"
    classifier "sources"
    from sourceSets.main.allScala
}
task docsJar(type: Jar, dependsOn: scaladoc) {
    baseName "${project.name}_$vScala"
    classifier "docs"
    from scaladoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.hazelcast'
            artifactId jar.baseName

            from components.java
            artifact sourceJar
            artifact docsJar
        }
    }
}

bintray {
    user = System.properties.bintrayUser ?: "n/a"
    key = System.properties.bintrayApiKey ?: "n/a"
    dryRun = (user == "n/a" || key == "n/a" || version.startsWith('SNAPSHOT'))
    publish = !dryRun
    publications = ['maven']
    pkg {
        repo = System.properties.bintrayRepo
        name = System.properties.bintrayName
    }
}
